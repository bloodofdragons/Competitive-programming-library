{
    "scope":"source.c++",
    "completions":
    [
        { "trigger": "repi", "contents": "for(auto i = 0; i < n; i++)\n{\n\t$0\n}"},
        { "trigger": "repj", "contents": "for(auto j = 0; j < n; j++)\n{\n\t$0\n}"},
        { "trigger": "repk", "contents": "for(auto k = 0; k < n; k++)\n{\n\t$0\n}"},
        
        { "trigger": "repei", "contents": "for(auto i = 0; i <= n; i++)\n{\n\t$0\n}"},
        { "trigger": "repej", "contents": "for(auto j = 0; j <= n; j++)\n{\n\t$0\n}"},
        { "trigger": "repek", "contents": "for(auto k = 0; k <= n; k++)\n{\n\t$0\n}"},
        
        { "trigger": "peri", "contents": "for(auto ${1:i} = ${2:n - 1}; $1 >= ${3:0}; ${4:-- $1})\n{\n\t$0\n}"},
        { "trigger": "perj", "contents": "for(auto ${1:j} = ${2:n - 1}; $1 >= ${3:0}; ${4:-- $1})\n{\n\t$0\n}"},
        { "trigger": "perk", "contents": "for(auto ${1:k} = ${2:n - 1}; $1 >= ${3:0}; ${4:-- $1})\n{\n\t$0\n}"},
        
        
        { "trigger": "perei", "contents": "for(auto ${1:i} = ${2:n }; $1 >= ${3:0}; ${4:-- $1})\n{\n\t$0\n}"},
        { "trigger": "perej", "contents": "for(auto ${1:j} = ${2:n }; $1 >= ${3:0}; ${4:-- $1})\n{\n\t$0\n}"},
        { "trigger": "perek", "contents": "for(auto ${1:k} = ${2:n }; $1 >= ${3:0}; ${4:-- $1})\n{\n\t$0\n}"},
        
        { "trigger": "readarray", "contents": "for(auto i = 0; i < n; i++)\n{\n\tcin >> $0[i] ;\n}"},
        { "trigger": "readapairs", "contents": "for(auto i = 0; i < n; i++)\n{\n\tcin >> $0[i].first >> $0[i].second ;\n}"},
        { "trigger": "readgrid", "contents": "for(auto i = 0; i < n; i++)\n{\n\tfor(auto j = 0 ;j < n; j++)\n\t{\n\t\tcin >> $0[i][j] ;\n\t}\n}"},
        
        
        
        { "trigger": "fordr", "contents": "for(auto [di, dj]: dr){\n\tint ni = i + di, nj = j + dj;\n\tif(0 <= min(ni, nj) && ni < h && nj < w){\n\t\t$0\n\t}\n}"},
        { "trigger": "foreach", "contents": "for(auto&& $1: $2){\n\t$0\n}"},


        { "trigger": "while", "contents": "while($1)\n{\n\t$0\n}"},
        { "trigger": "dowhile", "contents": "do\n{\n\t$0\n}\nwhile($1);"},
        
        
        { "trigger": "if", "contents": "if($1)\n{\n\t$0\n}"},
        { "trigger": "else if", "contents": "else if($1)\n{\n\t$0\n}"},
        { "trigger": "else", "contents": "else\n{\n\t$0\n}"},
        
        { "trigger": "struct", "contents": "struct $1{\n\t$0\n};"},
        
        { "trigger": "return", "contents": "return $1;"},
        { "trigger": "exit", "contents": "exit(0);"},

        { "trigger": "dr4", "contents": "static const vector<pair<int, int>> dr{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};"},
        { "trigger": "dr8", "contents": "static const vector<pair<int, int>> dr{{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};"},
        
        { "trigger": "sort", "contents": "sort($1.begin(),$1.end());"},
        
        { "trigger": "reverse", "contents": "reverse($1.begin(),$1.end());"},
        
        { "trigger": "rotate", "contents": "rotate($1.begin(), $1.begin() + $2, $1.end());"},
        

        { "trigger": "accumulate", "contents": "accumulate($1.begin(),$1.end(), ${3:0LL});"},
        
        { "trigger": "partial_sum", "contents": "partial_sum(${1:$2.begin(), $2.end()}, $3);"},
        
        { "trigger": "max_element", "contents": "max_element($1.begin(),$1.end());"},
        { "trigger": "min_element", "contents": "min_element($1.begin(),$1.end());"},
        { "trigger": "binary_search", "contents": "binary_search($1.begin(),$1.end(), $3);"},
        { "trigger": "lower_bound", "contents": "lower_bound($1.begin(),$1.end(), $3);"},
        { "trigger": "upper_bound", "contents": "upper_bound($1.begin(),$1.end(), $3);"},
        { "trigger": "lbind", "contents": "lower_bound($1.begin(),$1.end(), $3) - $1.begin();"},
        { "trigger": "ubind", "contents": "upper_bound($1.begin(),$1.end(), $3) - $1.begin();"},


        { "trigger": "fill", "contents": "fill(${1:$2.begin(), $2.end()}, $3);"},
        
        { "trigger": "find", "contents": "find(${1:$2.begin(), $2.end()}, $3);"},
        
        { "trigger": "count_", "contents": "count($1.begin(),$1.end(), $3);"},

        { "trigger": "shuffle", "contents": "shuffle($1.begin(),$1.end(), rng);"},


        { "trigger": "next_permutation", "contents": "next_permutation($1.begin(),$1.end());"},
        { "trigger": "prev_permutation", "contents": "prev_permutation($1.begin(),$1.end());"},
        
        
        { "trigger": "popcount\tCount the number of 1s", "contents": "__builtin_popcount$1($2)"},
        { "trigger": "parity\tGet the parity", "contents": "__builtin_parity$1($2)"},
        { "trigger": "clz\tCount the number of leading zeros", "contents": "__builtin_clz$1($2)"},
        { "trigger": "ctz\tCount the number of trailing zeros", "contents": "__builtin_ctz$1($2)"},
        { "trigger": "ffs\tReturn the position of the first set bit", "contents": "__builtin_ffs$1($2)"},
        { "trigger": "clrsb\tCount the number of leading redundant sign bits", "contents": "__builtin_clrsb$1($2)"},
        { "trigger": "addoverflow", "contents": "__builtin_add_overflow_p($1, $2, ${3:0})"},
        { "trigger": "muloverflow", "contents": "__builtin_mul_overflow_p($1, $2, ${3:0})"},
        { "trigger": "suboverflow", "contents": "__builtin_sub_overflow_p($1, $2, ${3:0})"},
        

        { "trigger": "ll", "contents": "long long"},
        { "trigger": "ull", "contents": "unsigned long long"},
        { "trigger": "lld","contents":"long double"},
        
        
        { "trigger": "ump", "contents": "unordered_map"},     
        { "trigger": "ust", "contents": "unordered_set"},

        { "trigger": "pii", "contents": "pair<int, int>"},
        { "trigger": "pil", "contents": "pair<int, long long>"},
        { "trigger": "pli", "contents": "pair<long long, int>"},
        { "trigger": "pll", "contents": "pair<long long, long long>"},
        

        { "trigger": "vbool", "contents": "vector<bool>"},
        { "trigger": "vi", "contents": "vector<int>"},
        { "trigger": "vll", "contents": "vector<long long>"},
        { "trigger": "vd", "contents": "vector<double>"},
        { "trigger": "vstring", "contents": "vector<string>"},

        { "trigger": "vpii", "contents": "vector<pair<int, int>>"},
        { "trigger": "vpil", "contents": "vector<pair<int, long long>>"},
        { "trigger": "vpli", "contents": "vector<pair<long long, int>>"},

        { "trigger": "vpll", "contents": "vector<pair<long long, long long>>"},
        { "trigger": "vvb", "contents": "vector<vector<bool>>"},
        { "trigger": "vvi", "contents": "vector<vector<int>>"},
        { "trigger": "vvl", "contents": "vector<vector<long long>>"},
        { "trigger": "vvd", "contents": "vector<vector<double>>"},


        { "trigger": "vvpii", "contents": "vector<vector<pair<int, int>>>"},
        { "trigger": "vvpil", "contents": "vector<vector<pair<int, long long>>>"},
        { "trigger": "vvpli", "contents": "vector<vector<pair<long long, int>>>"},
        { "trigger": "vvpll", "contents": "vector<vector<pair<long long, long long>>>"},
        
        { "trigger": "vvvi", "contents": "vector<vector<vector<int>>>"},
        { "trigger": "vvvl", "contents": "vector<vector<vector<long long>>>"},
        { "trigger": "vvvd", "contents": "vector<vector<vector<double>>>"},
        { "trigger": "vvvpii", "contents": "vector<vector<vector<pair<int, int>>>>"},
        

        { "trigger": "pq", "contents": "priority_queue<$1>"},
        { "trigger": "gpq", "contents": "priority_queue<$1, vector<$1>, greater<$1>>"},
        { "trigger": "function", "contents": "[&]($1)->${2:void}{\n\t$0\n};"},
        { "trigger": "recursion", "contents": "y_combinator([&](auto self, $1)->${2:void}{\n\t$0\n});"},
        
        { "trigger": "dfs", "contents": "y_combinator([&](auto self, int u, int pe)->void{\n\tfor(auto id: g.adj[u] | ranges::views::filter([&](int id){ return !g.ignore || !g.ignore(id);})){\n\t\tif(id == pe) continue;\n\t\tauto &e = g.edge[id];\n\t\tint v = u ^ e.from ^ e.to;\n\t\tself(v, id);\n\t\t$0\n\t}\n})(0, -1);"},
        { "trigger": "raw_dfs", "contents": "y_combinator([&](auto self, ${1:int u, int p})->${2:void}{\n\tfor(auto v: adj[u]){\n\t\tif(v == p) continue;\n\t\t$0self(v, u);\n\t}\n})(${3:0, -1});"},
        { "trigger": "iterate_adj", "contents": "for(auto id: g.adj[u] | ranges::views::filter([&](int id){ return !g.ignore || !g.ignore(id);})){\n\tauto &e = g.edge[id];\n\tint v = u ^ e.from ^ e.to;\n\t$0\n}"},
        { "trigger": "lambda", "contents": "[&]($1){ $2 }"},
        { "trigger": "unique", "contents": "$1.erase(unique($1.begin(), $1.end()), $1.end());"},
        
        { "trigger": "push_back", "contents": "push_back($1);" },
        { "trigger": "pop_back", "contents": "pop_back();"},
        
        { "trigger": "push_front", "contents": "push_front($1);" },
        { "trigger": "pop_front", "contents": "pop_front();"},
        { "trigger": "emplace_back", "contents": "emplace_back($1);" },
        { "trigger": "front", "contents": "front()"},
        { "trigger": "back", "contents": "back()"},
        { "trigger": "begin", "contents": "begin()"},
        { "trigger": "end", "contents": "end()"},
        { "trigger": "rbegin", "contents": "rbegin()"},
        { "trigger": "rend", "contents": "rend()"},
        { "trigger": "insert", "contents": "insert($1);"},
        { "trigger": "erase", "contents": "erase($1);"},
        { "trigger": "first", "contents": "first"},
        { "trigger": "second", "contents": "second"},
        { "trigger": "find_by_order", "contents": "find_by_order($1)"},
        { "trigger": "order_of_key", "contents": "order_of_key($1)"},
        { "trigger": "_Find_first", "contents": "_Find_first()"},
        { "trigger": "_Find_next", "contents": "_Find_next($1)"},

        { "trigger": "precision", "contents": "cout << fixed << setprecision(15);"},
        { "trigger": "mod1", "contents": "1e9 + 7"},
        { "trigger": "mod2", "contents": "(119 << 23) + 1"},
        { "trigger": "inf", "contents": "1001001001"},
        { "trigger": "INF", "contents": "1001001001001001001ll"},
        { "trigger": "dinf", "contents": "const int inf = 1001001001;"},
        { "trigger": "dINF", "contents": "const long long INF = 01001001001001001001ll;"},
          
        // for dynamic programming
        { "trigger": "dpll1", "contents": "vector<long long> $1(def_size,-1) ;"},
        { "trigger": "dpi1", "contents": "vector<int> $1(def_size,-1) ;"},
        
        { "trigger": "dpll2", "contents": "vector<vector<long long>> $1(def_size,vector<long long>(def_size,-1)) ;"},
        { "trigger": "dpi2", "contents": "vector<vector<int>> $1(def_size,vector<int>(def_size,-1)) ;"},
           
        { "trigger": "all", "contents": "$1.begin(), $1.end()"},
        { "trigger": "rall", "contents": "$1.rbegin(), $1.rend()"},
        { "trigger": "sz", "contents": "(int)$1.size()"},
        { "trigger": "pi", "contents": "const double pi = acos(-1);"},
        { "trigger": "kill", "contents": "auto kill = [](){\n\t${1:cout << -1;}\n\texit(0);\n};"},
        { "trigger": "iop", "contents": "istream &operator>>(istream &in, $1 &$2){\n\t${3:return in >> $2;}\n}"},
        { "trigger": "oop", "contents": "ostream &operator<<(ostream &out, const $1 &$2){\n\t${3:return out << $2;}\n}"},
        { "trigger": "cl", "contents": "cout << \"\\n\";"},
        { "trigger": "flush", "contents": "cout << endl;"},
        { "trigger": "order_statistic_trees", "contents": "#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\ntemplate<class T, class U, class Compare = less<>> using order_statistic_map = tree<T, U, Compare, rb_tree_tag, tree_order_statistics_node_update>;\ntemplate<class T, class Compare = less<>> using order_statistic_set = order_statistic_map<T, null_type, Compare>;"},
        { "trigger": "changeto", "contents": "template<class T> T &ctmin(T &x){ return x; }\ntemplate<class T, class Head, class ...Tail> T &ctmin(T &x, const Head &h, const Tail &... t){ return ctmin(x = min<T>(x, h), t...); }\ntemplate<class T> T &ctmax(T &x){ return x; }\ntemplate<class T, class Head, class ...Tail> T &ctmax(T &x, const Head &h, const Tail &... t){ return ctmax(x = max<T>(x, h), t...); }\n"},
        
        { "trigger": "fopen", "contents" : "ifstream cin; ofstream cout;\ncin.open(\"$1.in\"); cout.open(\"$1.out\");"},
        { "trigger": "fclose", "contents": "cin.close(); cout.close();"},
        { "trigger": "initialize", "contents": "    cin.tie(0)->sync_with_stdio(0), cin.exceptions(ios::badbit | ios::failbit);"},
        { "trigger": "local", "contents": "#ifdef LOCAL\n$0\n#else\n\n#endif"},
        { "trigger": "mt19937", "contents": "mt19937(chrono::high_resolution_clock().now().time_since_epoch().count())"},
        { "trigger": "mt19937_64", "contents": "mt19937_64(chrono::high_resolution_clock().now().time_since_epoch().count())"},
        { "trigger": "pragma", "contents": "#pragma GCC optimize(\"Ofast,unroll-loops\")\n#pragma GCC target(\"avx2,tune=native,popcnt,lzcnt,abm,bmi,bmi2\")\n// #pragma GCC target(\"sse,sse2,sse3,sse4,sse4.1,sse4.2,tune=native,popcnt,lzcnt,abm,bmi,bmi2\")"}
    ]
}
